# CantoneseScribe Staging Environment Configuration
# For testing production features before deployment

# ==================================================
# APPLICATION ENVIRONMENT
# ==================================================
ENVIRONMENT=staging
DEBUG=false
NODE_ENV=staging

# ==================================================
# FRONTEND CONFIGURATION
# ==================================================
# Staging API URLs (Vercel preview deployment)
VITE_API_BASE_URL=https://cantonese-scribe-pro-staging.vercel.app/api/v1
VITE_WS_BASE_URL=wss://cantonese-scribe-pro-staging.vercel.app/ws

# Feature flags for staging (test all features)
VITE_ENABLE_FILE_UPLOAD=true
VITE_ENABLE_WEBSOCKET=true
VITE_ENABLE_PAYMENTS=true

# Staging logging (more verbose than production)
VITE_DEBUG_MODE=true
VITE_LOG_LEVEL=info

# ==================================================
# BACKEND API CONFIGURATION
# ==================================================
API_PREFIX=/api/v1

# CORS configuration for staging
ALLOWED_ORIGINS=https://cantonese-scribe-pro-staging.vercel.app,http://localhost:3000,http://localhost:8080
ALLOWED_HOSTS=cantonese-scribe-pro-staging.vercel.app,localhost,127.0.0.1

# ==================================================
# DATABASE CONFIGURATION (SUPABASE STAGING)
# ==================================================
# Separate Supabase project for staging
DATABASE_URL=postgresql://postgres:[STAGING_PASSWORD]@db.[STAGING_PROJECT_REF].supabase.co:5432/postgres
SUPABASE_URL=https://[STAGING_PROJECT_REF].supabase.co
SUPABASE_KEY=[STAGING_SUPABASE_ANON_KEY]
SUPABASE_SERVICE_KEY=[STAGING_SUPABASE_SERVICE_ROLE_KEY]

# ==================================================
# EXTERNAL API SERVICES (STAGING/TEST KEYS)
# ==================================================
# OpenAI API (with lower rate limits for staging)
OPENAI_API_KEY=[STAGING_OPENAI_API_KEY]

# Google Cloud Platform (staging service account)
GOOGLE_APPLICATION_CREDENTIALS=/var/task/google-credentials-staging.json
GOOGLE_CLOUD_CREDENTIALS=[STAGING_BASE64_ENCODED_SERVICE_ACCOUNT_JSON]
GOOGLE_TRANSLATE_API_KEY=[STAGING_GOOGLE_TRANSLATE_API_KEY]

# ==================================================
# REDIS CONFIGURATION (UPSTASH STAGING)
# ==================================================
REDIS_URL=redis://default:[STAGING_PASSWORD]@[STAGING_UPSTASH_ENDPOINT]:6379
REDIS_PASSWORD=[STAGING_UPSTASH_PASSWORD]
QUEUE_NAME=transcription_queue_staging

# ==================================================
# STRIPE PAYMENT PROCESSING (TEST MODE)
# ==================================================
# Stripe Test Keys for staging
STRIPE_PUBLIC_KEY=pk_test_[STRIPE_TEST_PUBLISHABLE_KEY]
STRIPE_SECRET_KEY=sk_test_[STRIPE_TEST_SECRET_KEY]
STRIPE_WEBHOOK_SECRET=whsec_[STRIPE_TEST_WEBHOOK_SECRET]
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_[STRIPE_TEST_PUBLISHABLE_KEY]

# ==================================================
# FILE STORAGE & CDN (CLOUDFLARE R2 STAGING)
# ==================================================
# Separate R2 bucket for staging
R2_ACCOUNT_ID=[R2_ACCOUNT_ID]
R2_ACCESS_KEY_ID=[STAGING_R2_ACCESS_KEY_ID]
R2_SECRET_ACCESS_KEY=[STAGING_R2_SECRET_ACCESS_KEY]
R2_BUCKET_NAME=cantonese-scribe-staging
R2_PUBLIC_URL=https://staging-cdn.your-domain.com

# File storage limits (same as production)
MAX_FILE_SIZE=100000000
TEMP_DIR=/tmp/cantonese-scribe
UPLOAD_DIR=/tmp/cantonese-scribe/uploads
PROCESSED_DIR=/tmp/cantonese-scribe/processed

# ==================================================
# PERFORMANCE & SCALING CONFIGURATION
# ==================================================
# Staging scaling settings (lower than production)
MAX_CONCURRENT_JOBS=5
JOB_TIMEOUT=1800
CLEANUP_INTERVAL=1800

# Rate limiting for staging
RATE_LIMIT_REQUESTS=500
RATE_LIMIT_WINDOW=3600

# ==================================================
# COST MANAGEMENT
# ==================================================
# Lower cost thresholds for staging
MAX_DAILY_COST=25.0
WHISPER_COST_PER_MINUTE=0.006
COST_ALERT_THRESHOLD=20.0

# ==================================================
# SECURITY CONFIGURATION
# ==================================================
# Different JWT secret for staging
SECRET_KEY=[STAGING_JWT_SECRET_KEY_256_BITS]
ACCESS_TOKEN_EXPIRE_MINUTES=60
ALGORITHM=HS256

# ==================================================
# MONITORING & ALERTING
# ==================================================
# Separate Sentry environment for staging
SENTRY_DSN=[SENTRY_DSN]
SENTRY_ENVIRONMENT=staging
SENTRY_TRACES_SAMPLE_RATE=0.5

# DataDog APM (optional staging)
DATADOG_API_KEY=[STAGING_DATADOG_API_KEY]
DATADOG_APP_KEY=[STAGING_DATADOG_APP_KEY]

# Staging alert endpoints
UPTIME_ALERT_WEBHOOK=[STAGING_UPTIME_ROBOT_WEBHOOK_URL]

# Mixpanel Analytics (separate project)
MIXPANEL_TOKEN=[STAGING_MIXPANEL_PROJECT_TOKEN]

# ==================================================
# VERCEL SPECIFIC CONFIGURATION
# ==================================================
# Vercel staging configuration
VERCEL_REGION=iad1
VERCEL_FUNCTION_MEMORY=1024
VERCEL_FUNCTION_TIMEOUT=300

# ==================================================
# DEPLOYMENT CONFIGURATION
# ==================================================
# Build configuration
BUILD_COMMAND=npm run build
INSTALL_COMMAND=npm ci && pip install -r requirements.txt
OUTPUT_DIRECTORY=dist

# Git deployment settings for staging
DEPLOY_ON_PUSH=true
PREVIEW_DEPLOYMENTS=true
PRODUCTION_BRANCH=staging